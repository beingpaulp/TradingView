// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © beingpaulp

//@version=5
indicator("Entry & Exits", overlay = true, max_bars_back = 240)

// This indicator is to help you plot your entries and exits on the chart for you.
// Ideally after you are done with your trade, export or download your data.
// Make sure you get the timestamps down to the second your order was filled.
// Create a list of entries and exits, for example:

//   "113543-3@4.00","121729-21@6.50"

// The above would be:
//   11:35:43 Buy to Open 3 at $4 =~ $400 * 3 = $1200
//   12:17:29 Sell to Close 3 at $6.5 =~ $650 * 3 = $1950 - $1200 = $750 (profit) / $1200 = 62.5% profit

// This was a real trade of a SPX 5480 Call on 2024-06-27, try loading this indicator and replay to ~12:20 on 6/27/2024

// You should only need to modify line 24 below

// Define the times at which you want to draw horizontal rays
// the format is hhmmss in 24-hour format
var trades = array.from("113543-3@4.00","121729-3@6.50")

// calculate a 1 day x2 ts (ms) offset
x2 = 1000 * 60 * 60 * 24

getBarIndexFromTimestamp(timestamp) =>
    var int barIndex = na
    var int currentTimestamp = na
    var int currentIndex = na

    // Loop backwards to find the closest timestamp match
    for i = 0 to 1000 // Adjust the loop range as needed for your timeframe
        currentTimestamp := time[i]
        if currentTimestamp <= timestamp
            currentIndex := i
            break
        else if currentTimestamp < timestamp
            // If current timestamp is less than the target, exit loop
            break

    // Return the bar_index (or -1 if timestamp not found)
    currentIndex

// Function to convert timestamp to human readable date/time
convertTimestamp(timestamp) =>
    humanDate = str.format_time(timestamp, "yyyy-MM-dd HH:mm:ss a")

if barstate.islast

    // delete
    a_allLines = line.all
    if array.size(a_allLines) > 0
        for i = 0 to array.size(a_allLines) - 1
            line.delete(array.get(a_allLines, i))
    a_allLabels = label.all
    if array.size(a_allLabels) > 0
        for i = 0 to array.size(a_allLabels) - 1
            label.delete(array.get(a_allLabels, i))

    // Loop through each time in the times array and draw horizontal rays anchored to the timestamp
    for tx in trades

        var line ray = na

        if (str.length(tx) >= 8)

            log.info("tx:{0}", tx)
            _ts = str.tonumber(str.substring(tx, 0, 6))
            desc = str.length(tx) >= 9 ? str.substring(tx, 7) : na

            // log.info("ts:{0} desc:{1}", _ts, desc)

            // Calculate timestamp for today's date and the specified time
            _hour = math.floor(_ts / 10000)
            _minute = math.floor((_ts - (_hour * 10000)) / 100)
            _second = math.floor(_ts - _hour * 10000 - _minute * 100)

            // assumes it is the current day (use replay as needed)
            ts = timestamp(year, month, dayofmonth, _hour, _minute, _second)

            index = getBarIndexFromTimestamp(ts)
            price = ohlc4[index]

            // log.info("timestamp:{0} barIndex:{1} ohlc4:{2}", str.tostring(ts), index, ohlc4[index])

            // Draw a horizontal ray at the calculated timestamp
            ray := line.new(ts, price, ts + x2, price, xloc = xloc.bar_time, extend = extend.right, width=1, color=color.orange, style=line.style_solid)

            // Create label on the right side, anchored to the price level
            point = chart.point.from_index(bar_index, price)
            label.new(point, convertTimestamp(ts) + " " + desc, style = label.style_label_left, color = color.white, size = size.normal)
